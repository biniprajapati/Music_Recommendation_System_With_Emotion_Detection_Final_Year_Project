import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
import pygame
import PIL.Image as im
import PIL.ImageTk as imtk
from PIL import ImageTk, Image
import time
from mutagen.mp3 import MP3
import tkinter.ttk as ttk

import cv2
import numpy as np

import os

def capture_photo():
    ret, frame = cap.read()
    if ret:
        # Convert the frame from BGR to grayscale
        gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # Detect faces in the frame
        faces = face_cascade.detectMultiScale(gray_frame, scaleFactor=1.3, minNeighbors=5)

        # Iterate over detected faces
        for (x, y, w, h) in faces:
            # Draw a rectangle around the face
            cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

        # Convert the frame from BGR to RGB
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)


        # Save the captured photo if a clear face is detected
        if len(faces) > 0:
            cv2.imwrite("captured_photo.jpg", cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))

        # photo_window = tk.Toplevel(root)
        # photo_window.title("Captured Photo")
        #
        # # Create a canvas in the new window
        # canvas_width = rgb_frame.shape[1]
        # canvas_height = rgb_frame.shape[0]
        # canvas = tk.Canvas(photo_window, width=canvas_width, height=canvas_height)
        # canvas.pack()

        # Create an ImageTk object from the captured photo
        img = ImageTk.PhotoImage(Image.fromarray(rgb_frame))

        # Display the captured photo on the canvas
        # canvas.create_image(0, 0, image=img, anchor=tk.NW)
        # canvas.img = img  # Store a reference to prevent garbage collection

def display_widgets():
    # Write some text on the image
    canvas_widget.create_text(300, 30, text="Welcome to EBMP", font=(
        'Helvetica', '30', 'bold'), fill='white')


def resize_image(e, updated_background_image):
    # Resize Image using resize function
    resized_background_image = updated_background_image.resize(
        (e.width, e.height), im.ANTIALIAS)
    return resized_background_image

def image_background(e):
    # Define updated_background_image, resized_background_image, new_background_image globally
    global updated_background_image, resized_background_image, new_background_image

    # Open and identify the image
    updated_background_image = im.open("bg.jpg")

    # Call the resize_image function
    resized_background_image = resize_image(e, updated_background_image)

    # Define resized image again using PhotoImage function
    new_background_image = imtk.PhotoImage(resized_background_image)

    # Display the newly created image in canvas
    canvas_widget.create_image(0, 0, image=new_background_image, anchor="nw")
    display_widgets()
    button()

def sbox():
    song_box = tk.Listbox(root, bg = "#383130", fg="White",width="150", height="30", selectbackground="grey", selectforeground="#1a1817")
    song_box.pack(pady=20)
    song_box_window = canvas_widget.create_window(300,150,anchor="nw",window=song_box)


def button():
    imag = Image.open('back.png')
    resized = imag.resize((50, 50), Image.LANCZOS)
    back_btn_img = ImageTk.PhotoImage(resized)
    imag1 = Image.open('front.png')
    resized1 = imag1.resize((50, 50), Image.LANCZOS)
    forward_btn_img = ImageTk.PhotoImage(resized1)

    imag2 = Image.open('play.png')
    resized2 = imag2.resize((50, 50), Image.LANCZOS)
    play_btn_img = ImageTk.PhotoImage(resized2)
    imag3 = Image.open('pause.png')
    resized3 = imag3.resize((50, 50), Image.LANCZOS)
    pause_btn_img = ImageTk.PhotoImage(resized3)
    imag4 = Image.open('stop.png')
    resized4 = imag4.resize((50, 50), Image.LANCZOS)
    stop_btn_img = ImageTk.PhotoImage(resized4)

    controls_frame = tk.Frame(root)
    controls_frame.pack()

    back_button = tk.Button(controls_frame, image=back_btn_img, borderwidth=0)
    forward_button = tk.Button(controls_frame, image=forward_btn_img, borderwidth=0)
    play_button = tk.Button(controls_frame, image=play_btn_img, borderwidth=0)
    pause_button = tk.Button(controls_frame, image=pause_btn_img, borderwidth=0)
    stop_button = tk.Button(controls_frame, image=stop_btn_img, borderwidth=0)

    back_button.grid(row=0, column=0, padx=10)
    forward_button.grid(row=0, column=3, padx=15)
    play_button.grid(row=0, column=6, padx=20)
    pause_button.grid(row=0, column=9, padx=15)
    stop_button.grid(row=0, column=12, padx=10)
root = tk.Tk()
root.title("Beap")
root.geometry("1550x725")

root.resizable(True, True) # Width, Height

# Define Image using PhotoImage function
background_image = imtk.PhotoImage(file="bg.jpg")

# Create and display the Canvas
canvas_widget = tk.Canvas(root, width=800, height=500, bd=0, highlightthickness=0)
canvas_widget.pack(fill="both", expand=True)

# Displaying the image inside canvas
canvas_widget.create_image(0, 0, image=background_image, anchor="nw")

# Create a canvas to display the camera feed
canvas_width = 640
canvas_height = 480
canvas = tk.Canvas(root, width=canvas_width, height=canvas_height)
canvas.pack()


# Load the Haar cascade for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
# Open the camera
cap = cv2.VideoCapture(0)

# START CAPTURING AND PREOCESSING FRAM
capture_photo()


#Create Music position slider

my_slider = ttk.Scale(root, from_= 0, to=100, orient=tk.HORIZONTAL, value=0, length=670)
my_slider.pack(pady=10)
# Run the main event loop
root.mainloop()

# Release the camera and clean up
cap.release()
cv2.destroyAllWindows()

